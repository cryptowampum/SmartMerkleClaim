/**
 * sSPORK Merkle Distributor Component
 * 
 * Created by: @cryptowampum
 * Developed with: Claude AI
 * 
 * Main interface for claiming USDC rewards based on sSPORK holdings
 * using Merkle proofs. Supports both Unicorn (gasless) and regular wallets.
 * 
 * @license MIT
 */

import React, { useState, useEffect } from 'react';
import { useActiveAccount, useActiveWallet } from "thirdweb/react";
import { prepareContractCall, sendTransaction, getContract, readContract } from "thirdweb";
import { client } from '../config/unicorn';
import { MERKLE_DISTRIBUTOR_ADDRESS, MERKLE_DISTRIBUTOR_ABI, getCurrentNetwork } from '../config/contracts';
import { polygon } from "thirdweb/chains";

// Import Merkle proofs data (generated by csv-to-merkle.js script)
import merkleProofs from '../data/merkle-proofs.json';

/**
 * Main Merkle Distributor Component
 * 
 * Handles the complete flow:
 * 1. Wallet connection detection
 * 2. Eligibility checking via Merkle proofs
 * 3. Claim status verification
 * 4. Gasless/regular transaction execution
 */
const MerkleDistributor = () => {
  // Thirdweb hooks for wallet state
  const account = useActiveAccount();
  const wallet = useActiveWallet();
  
  // Component state
  const [claimData, setClaimData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isClaimed, setIsClaimed] = useState(false);
  const [txHash, setTxHash] = useState('');
  const [error, setError] = useState('');
  const [contractBalance, setContractBalance] = useState('0');

  // Check eligibility and claim status when wallet connects
  useEffect(() => {
    if (account?.address) {
      checkEligibilityAndStatus(account.address);
    }
  }, [account]);

  /**
   * Check if address is eligible and whether they've already claimed
   */
  const checkEligibilityAndStatus = async (address) => {
    try {
      setError('');
      
      // Check if address exists in Merkle tree
      const data = merkleProofs[address];
      if (data) {
        setClaimData(data);
        
        // Check on-chain if already claimed
        const contract = getContract({
          client,
          chain: polygon,
          address: MERKLE_DISTRIBUTOR_ADDRESS,
          abi: MERKLE_DISTRIBUTOR_ABI,
        });
        
        const claimed = await readContract({
          contract,
          method: "isClaimed",
          params: [address]
        });
        
        setIsClaimed(claimed);
        
        // Get contract balance for debugging
        const balance = await readContract({
          contract,
          method: "getRemainingBalance",
          params: []
        });
        
        setContractBalance(balance.toString());
        
      } else {
        setClaimData(null);
        setIsClaimed(false);
      }
    } catch (err) {
      console.error("Error checking eligibility:", err);
      setError(`Failed to check eligibility: ${err.message}`);
    }
  };

  /**
   * Execute the claim transaction
   */
  const handleClaim = async () => {
    if (!account || !claimData) return;

    setIsLoading(true);
    setError('');
    setTxHash('');

    try {
      // Prepare contract instance
      const contract = getContract({
        client,
        chain: polygon,
        address: MERKLE_DISTRIBUTOR_ADDRESS,
        abi: MERKLE_DISTRIBUTOR_ABI,
      });

      // Prepare claim transaction
      const transaction = prepareContractCall({
        contract,
        method: "claim",
        params: [
          account.address,
          claimData.amount,
          claimData.proof
        ],
      });

      console.log('üéÅ Submitting claim transaction...', {
        address: account.address,
        amount: claimData.amount,
        proofLength: claimData.proof.length,
        isGasless: wallet?.id === 'inApp'
      });

      // Send transaction (gasless if Unicorn wallet)
      const result = await sendTransaction({
        transaction,
        account,
      });

      setTxHash(result.transactionHash);
      setIsClaimed(true);
      
      console.log("‚úÖ Claim successful:", result.transactionHash);
      
    } catch (err) {
      console.error("‚ùå Claim failed:", err);
      
      // User-friendly error messages
      let errorMessage = 'Claim failed. Please try again.';
      
      if (err.message.includes('user rejected')) {
        errorMessage = 'Transaction was cancelled by user.';
      } else if (err.message.includes('insufficient funds')) {
        errorMessage = 'Insufficient funds for gas (this shouldn\'t happen with Unicorn wallets).';
      } else if (err.message.includes('already claimed') || err.message.includes('AlreadyClaimed')) {
        errorMessage = 'Rewards have already been claimed for this address.';
        setIsClaimed(true);
      } else if (err.message.includes('invalid proof') || err.message.includes('InvalidProof')) {
        errorMessage = 'Invalid eligibility proof. Please contact support.';
      }
      
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Format USDC amount for display (6 decimals)
   */
  const formatUSDC = (amountWei) => {
    const amount = Number(amountWei) / 1e6;
    return amount.toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  };

  /**
   * Format wallet address for display
   */
  const formatAddress = (addr) => {
    if (!addr) return '';
    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;
  };

  // Component state helpers
  const isConnected = !!account?.address;
  const isUnicorn = wallet?.id === 'inApp';
  const networkName = getCurrentNetwork()?.name || 'Unknown';

  return (
    <div style={{ 
      maxWidth: '600px', 
      margin: '0 auto', 
      padding: '20px',
      fontFamily: '-apple-system, BlinkMacSystemFont, sans-serif'
    }}>
      {/* Header */}
      <header style={{ textAlign: 'center', marginBottom: '40px' }}>
        <h1 style={{ 
          color: '#6b46c1', 
          marginBottom: '10px',
          fontSize: '2.5rem',
          fontWeight: '700'
        }}>
          üç¥ sSPORK Rewards
        </h1>
        <p style={{ color: '#666', fontSize: '18px', marginBottom: '5px' }}>
          Claim your USDC rewards based on prior year sSPORK holdings
        </p>
        <p style={{ color: '#999', fontSize: '14px' }}>
          Created by <strong>@cryptowampum</strong> ‚Ä¢ Developed with <strong>Claude AI</strong>
        </p>
      </header>

      {/* Wallet Status */}
      {isConnected ? (
        <div style={{
          background: isUnicorn ? 'linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%)' : '#f8fafc',
          border: `2px solid ${isUnicorn ? '#0ea5e9' : '#64748b'}`,
          borderRadius: '16px',
          padding: '24px',
          marginBottom: '24px',
          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
        }}>
          <h3 style={{ 
            margin: '0 0 16px 0',
            color: isUnicorn ? '#0369a1' : '#374151',
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
          }}>
            {isUnicorn ? 'ü¶Ñ' : 'üíº'} 
            {isUnicorn ? 'Unicorn Wallet Connected' : 'Wallet Connected'}
            {isUnicorn && <span style={{ 
              background: '#10b981', 
              color: 'white', 
              padding: '2px 8px', 
              borderRadius: '12px', 
              fontSize: '12px',
              fontWeight: '600'
            }}>GASLESS</span>}
          </h3>
          
          <div style={{ display: 'grid', gap: '8px', fontSize: '15px' }}>
            <div>
              <strong>Address:</strong> 
              <code style={{ 
                marginLeft: '8px', 
                background: 'rgba(0,0,0,0.05)', 
                padding: '2px 6px', 
                borderRadius: '4px',
                fontSize: '14px'
              }}>
                {formatAddress(account.address)}
              </code>
            </div>
            <div><strong>Network:</strong> {networkName}</div>
            {isUnicorn && (
              <div style={{ color: '#059669' }}>
                <strong>Gas Fees:</strong> ‚ö° Sponsored by Unicorn
              </div>
            )}
          </div>
        </div>
      ) : (
        <div style={{
          background: 'linear-gradient(135deg, #fef3c7 0%, #fde68a 100%)',
          border: '2px solid #f59e0b',
          borderRadius: '16px',
          padding: '32px',
          marginBottom: '24px',
          textAlign: 'center',
          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
        }}>
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>üîå</div>
          <h3 style={{ color: '#92400e', marginBottom: '16px', fontSize: '24px' }}>
            Wallet Connection Required
          </h3>
          <p style={{ color: '#a16207', marginBottom: '20px', fontSize: '16px' }}>
            This dApp will automatically connect when accessed through a Unicorn App Center,
            or you can connect manually with any wallet.
          </p>
          
          <div style={{
            background: 'rgba(255,255,255,0.7)',
            borderRadius: '12px',
            padding: '16px',
            marginTop: '20px'
          }}>
            <h4 style={{ margin: '0 0 12px 0', color: '#92400e' }}>ü¶Ñ Unicorn Wallet Benefits</h4>
            <ul style={{ 
              textAlign: 'left', 
              color: '#a16207',
              margin: '0',
              paddingLeft: '20px',
              fontSize: '14px'
            }}>
              <li>Zero gas fees for claiming</li>
              <li>Enhanced security with smart accounts</li>
              <li>Instant connection from App Centers</li>
              <li>Mobile-optimized experience</li>
            </ul>
          </div>
        </div>
      )}

      {/* Error Display */}
      {error && (
        <div style={{
          background: '#fef2f2',
          border: '2px solid #ef4444',
          borderRadius: '12px',
          padding: '16px',
          marginBottom: '20px'
        }}>
          <h4 style={{ margin: '0 0 8px 0', color: '#dc2626', display: 'flex', alignItems: 'center', gap: '8px' }}>
            ‚ùå Error
          </h4>
          <p style={{ margin: '0', color: '#dc2626', fontSize: '14px' }}>
            {error}
          </p>
        </div>
      )}

      {/* Claim Interface */}
      {isConnected && (
        <div style={{
          background: '#ffffff',
          border: '2px solid #e5e7eb',
          borderRadius: '16px',
          padding: '24px',
          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
        }}>
          {claimData ? (
            <>
              {/* Eligible - Show Reward Info */}
              <div style={{
                background: 'linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%)',
                border: '2px solid #22c55e',
                borderRadius: '12px',
                padding: '20px',
                marginBottom: '24px'
              }}>
                <h3 style={{ 
                  color: '#15803d', 
                  margin: '0 0 16px 0',
                  fontSize: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}>
                  ‚úÖ You're Eligible!
                </h3>
                
                <div style={{ display: 'grid', gap: '12px' }}>
                  <div style={{ fontSize: '24px', fontWeight: '700', color: '#15803d' }}>
                    {formatUSDC(claimData.amount)} USDC
                  </div>
                  <div style={{ fontSize: '14px', color: '#16a34a' }}>
                    Reward based on {claimData.sSPORKAmount?.toLocaleString() || 'your'} sSPORK holdings from prior year
                  </div>
                </div>
              </div>

              {/* Claim Status */}
              {isClaimed ? (
                <div style={{
                  background: 'linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%)',
                  border: '2px solid #3b82f6',
                  borderRadius: '12px',
                  padding: '20px',
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: '48px', marginBottom: '12px' }}>üéâ</div>
                  <h4 style={{ margin: '0 0 12px 0', color: '#1d4ed8', fontSize: '20px' }}>
                    Rewards Successfully Claimed!
                  </h4>
                  <p style={{ margin: '0 0 16px 0', color: '#1e40af', fontSize: '14px' }}>
                    Your USDC rewards have been transferred to your wallet.
                  </p>
                  {txHash && (
                    <a 
                      href={`${getCurrentNetwork()?.blockExplorer}/tx/${txHash}`}
                      target="_blank" 
                      rel="noopener noreferrer"
                      style={{ 
                        color: '#2563eb', 
                        textDecoration: 'none',
                        fontSize: '14px',
                        fontWeight: '600'
                      }}
                    >
                      View Transaction ‚Üí
                    </a>
                  )}
                </div>
              ) : (
                <>
                  {/* Claim Button */}
                  <button
                    onClick={handleClaim}
                    disabled={isLoading}
                    style={{
                      width: '100%',
                      padding: '16px 24px',
                      background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #16a34a 0%, #15803d 100%)',
                      color: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      fontSize: '18px',
                      fontWeight: '700',
                      cursor: isLoading ? 'not-allowed' : 'pointer',
                      marginBottom: '16px',
                      transition: 'all 0.2s',
                      boxShadow: isLoading ? 'none' : '0 4px 12px rgba(22, 163, 74, 0.3)',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '8px'
                    }}
                  >
                    {isLoading ? (
                      <>‚è≥ Claiming Rewards...</>
                    ) : (
                      <>üéÅ Claim {formatUSDC(claimData.amount)} USDC</>
                    )}
                  </button>

                  {/* Gas Fee Info */}
                  <div style={{
                    background: isUnicorn ? '#f0fdf4' : '#fef3c7',
                    border: `1px solid ${isUnicorn ? '#22c55e' : '#f59e0b'}`,
                    borderRadius: '8px',
                    padding: '12px',
                    fontSize: '14px',
                    textAlign: 'center'
                  }}>
                    {isUnicorn ? (
                      <span style={{ color: '#15803d' }}>
                        ‚ö° <strong>Free Transaction!</strong> Gas fees sponsored by your Unicorn wallet
                      </span>
                    ) : (
                      <span style={{ color: '#a16207' }}>
                        ‚õΩ <strong>Gas Required:</strong> ~$3-8 depending on network congestion
                      </span>
                    )}
                  </div>
                </>
              )}

              {/* Transaction Success */}
              {txHash && !isClaimed && (
                <div style={{
                  background: 'linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%)',
                  border: '2px solid #22c55e',
                  borderRadius: '12px',
                  padding: '16px',
                  marginTop: '16px'
                }}>
                  <h4 style={{ margin: '0 0 8px 0', color: '#15803d' }}>
                    ‚úÖ Transaction Submitted!
                  </h4>
                  <p style={{ margin: '4px 0', fontSize: '14px', color: '#16a34a' }}>
                    <strong>Tx Hash:</strong> {formatAddress(txHash)}
                  </p>
                  <a 
                    href={`${getCurrentNetwork()?.blockExplorer}/tx/${txHash}`}
                    target="_blank" 
                    rel="noopener noreferrer"
                    style={{ color: '#15803d', textDecoration: 'none', fontSize: '14px', fontWeight: '600' }}
                  >
                    View on {getCurrentNetwork()?.name} Explorer ‚Üí
                  </a>
                </div>
              )}
            </>
          ) : (
            /* Not Eligible */
            <div style={{
              textAlign: 'center',
              padding: '32px 16px'
            }}>
              <div style={{ fontSize: '48px', marginBottom: '16px' }}>‚ÑπÔ∏è</div>
              <h3 style={{ color: '#f59e0b', marginBottom: '16px', fontSize: '20px' }}>
                Address Not Eligible
              </h3>
              <p style={{ color: '#6b7280', marginBottom: '16px', fontSize: '16px' }}>
                This wallet address is not eligible for sSPORK rewards.
              </p>
              <div style={{
                background: '#f9fafb',
                border: '1px solid #e5e7eb',
                borderRadius: '8px',
                padding: '16px',
                fontSize: '14px',
                color: '#6b7280'
              }}>
                <strong>Requirements for eligibility:</strong>
                <ul style={{ textAlign: 'left', marginTop: '8px', paddingLeft: '20px' }}>
                  <li>Must have held sSPORK tokens during the specified period</li>
                  <li>Address must be in the approved distribution list</li>
                  <li>Ensure you're connected with the correct wallet</li>
                </ul>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Footer */}
      <footer style={{
        background: '#f8fafc',
        border: '1px solid #e2e8f0',
        borderRadius: '12px',
        padding: '20px',
        marginTop: '32px',
        fontSize: '14px',
        color: '#64748b'
      }}>
        <h4 style={{ margin: '0 0 12px 0', color: '#374151' }}>‚ÑπÔ∏è How It Works</h4>
        <ul style={{ margin: '0', paddingLeft: '20px' }}>
          <li>Connect your wallet (Unicorn for gasless claiming or any wallet)</li>
          <li>System checks if your address held sSPORK tokens in the qualifying period</li>
          <li>If eligible, claim your USDC rewards with one click</li>
          <li>Each address can only claim once</li>
        </ul>
        
        <hr style={{ margin: '16px 0', border: 'none', borderTop: '1px solid #e2e8f0' }} />
        
        <div style={{ textAlign: 'center', fontSize: '12px' }}>
          <p style={{ margin: '4px 0' }}>
            Built with ‚ù§Ô∏è for the sSPORK community
          </p>
          <p style={{ margin: '4px 0' }}>
            Created by <strong>@cryptowampum</strong> ‚Ä¢ Developed with <strong>Claude AI</strong>
          </p>
        </div>
      </footer>
    </div>
  );
};

export default MerkleDistributor;